#welcome
  .big_heading
    %h1 SimpleCI
    %h2 A simple approach to a tedious task

  .clear
  .instructions.hidden
    %h4 Whats it for
    %p= "SimpleCi is a tool to allow you to automatically run a set of command line commands on a project and store the results whenever the project's master branch is commited to."

    %p= "For example you might have a rails app and when you commit to *master you want to run a set of tests, ie: \"bundle exec rake spec\" and \"bundle exec cucumber -p all\".  SimpleCi allows you to define a project (with path to a git repo) and the commands you want to run.  Now when you commit to master both these will be automatically run and the outcome from them will be displayed on the projects page."


    %h4 More than just a spec runner.
    %p= "SimpleCi is not aimed at just running specs, its aimed at running commands.  Anything which you could run in a terminal in the root of your project can be used as a command.  The output from a command is evalulated with a ResultMatcher which retuns a :success or :failure status depending on the content of the output.  SimpleCi comes with result matchers for rspec and cucumber results but other custom result matchers can be easily defined."

    %p= "It is also desinged to run commands in parrallel.  If you define a number of commands for a project then when the project is updated all the commands will be processed together.  This enables you to parrallel your test suite and cut run times down.  Rather than one command ie; \"rake spec\", you could have two ie \"bundle exec rspec spec/models/*.rb\" and \"bundle exec rspec spec/controllers/*.rb\" and now both commands will be executed together."

  .hidden
    %p
      Imagine you have a git repo and you want to run a set 'commands', ie rake tasks (or tests maybe) and record the results.  You want this to happen automaticaly when the master branch is commited to and you want something to happed depending on the result of the command.
    %p
      Overcourse as a good scientist you want tests run in a clean environment and as a paraniod developer you don't want some 3rd party app mucking about in your project.


    %p
      The idea behind it is simple, but what you can do with it is quite complex (not changing planes in Ohare complex, but...)
    %p
      Create a "project" and point it at your git repo and then define some "actions" for the project.  An action has a command like "bundle exec rake spec" and a "result matcher".  The command can be anything which you could run in a command line in your repo's root dir.  Result matchers (which are simple to define) take the output from the command and pass it into a block as the variable result along with a hash called output.  Within the block the result can be inspected for certain elements and output[:status] can be set to :success or :failure accordingly.  output can also have some other keys set (:message, :summary, :time) which will be displayed in the interface.



    %h4 How to use it
    %p well you've got this far, you need to also have run rake runner in the root of this app.
    %p
      well ok not quite;  click begin to create a new project.  Give it a name and enter the url for the repo.  You can also define commands which are needed to be run to initialize the repo and update it.  ie; if you need to run a 'rake setup' task one time after cloning that can be added as a setup command.
    %p

    %h5= link_to 'Begin!', new_project_path

    %h4 How does it work
    %p Right so, how it works is, you see, well....
    %p



  - unless @projects.empty?
    .grid_12.front_page_projects
      .left
        %h2
          Projects
      %h4
        = link_to 'New Project', new_project_path

      .clear
      - @projects.each do |project|
        %a{:href => project_path(project), :class => 'css_table'}
          .label= project.name
          .value= project.source_path

      .clear


  -else
    .grid_8.push_2
      .welcome_links
        = link_to_function "Read some drivel", "$('.instructions').show('fast');$('.welcome_links').hide('fast');"
        or
        = link_to "Pretend you know what your doing", new_project_path
